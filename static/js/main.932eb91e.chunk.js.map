{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","calculate","event","tot","state","ass","mtt","mpt","setState","score","status","preventDefault","onSubmit","this","className","class","type","placeholder","min","max","onChange","e","target","value","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAoEeA,G,wDAjEX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAGVC,UAAU,SAACC,GAEP,IAMKC,EAHI,GAHH,EAAKC,MAAMC,IAGF,IACN,GAHH,EAAKD,MAAME,IAGF,GACN,GAHH,EAAKF,MAAMG,IAGF,GAEXJ,EAAI,GACH,EAAKK,SAAS,CAACC,MAAM,IAAIC,OAAO,SAE5BP,EAAI,IAAMA,EAAI,GAEnB,EAAKK,SAAS,CAACC,MAAM,IAAIC,OAAO,SAE3BP,EAAI,IAAMA,EAAI,GAEnB,EAAKK,SAAS,CAACC,MAAM,IAAIC,OAAO,SAE3BP,EAAI,IAAMA,EAAI,GAEnB,EAAKK,SAAS,CAACC,MAAM,IAAIC,OAAO,SAE3BP,EAAI,IAAMA,EAAI,GAEnB,EAAKK,SAAS,CAACC,MAAM,IAAIC,OAAO,SAIhC,EAAKF,SAAS,CAACC,MAAM,IAAIC,OAAO,SAElCR,EAAMS,kBAlCR,EAAKP,MAAM,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEG,OAAO,GAAGD,MAAM,IAFhC,E,qDAuCT,IAAD,OACJ,OACM,gCACE,kDACE,uBAAMG,SAAUC,KAAKZ,UAAWa,UAAU,UAAUC,MAAM,SAA1D,UACI,sBAAKD,UAAU,QAAf,UACA,8DACA,uBAAOE,KAAK,SAASC,YAAY,mBAAmBC,IAAI,IAAIC,IAAI,MAAMC,SAAU,SAACC,GAAK,EAAKb,SAAS,CAACH,IAAIgB,EAAEC,OAAOC,WAAkB,0BAEpI,sBAAKT,UAAU,QAAf,UACA,uDACA,uBAAOE,KAAK,SAASC,YAAY,YAAYC,IAAI,IAAIC,IAAI,KAAKC,SAAU,SAACC,GAAK,EAAKb,SAAS,CAACF,IAAIe,EAAEC,OAAOC,WAAkB,0BAE5H,sBAAKT,UAAU,QAAf,UACA,uDACA,uBAAOE,KAAK,SAASC,YAAY,YAAaC,IAAI,IAAIC,IAAI,KAAKC,SAAU,SAACC,GAAK,EAAKb,SAAS,CAACD,IAAIc,EAAEC,OAAOC,WAAkB,0BAE7H,wBAAQT,UAAU,YAAYE,KAAK,SAAnC,uBAEd,+CAAmBH,KAAKT,MAAMK,SAC9B,gDAAmBI,KAAKT,MAAMM,iB,GA5DpBc,IAAMC,YCUTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.932eb91e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={ass:0,mtt:0,mpt:0,status:'',score:''}\n    }\n    calculate=(event)=>{\n        \n        var a=this.state.ass;\n        var b=this.state.mtt;\n        var c=this.state.mpt;\n         var a1=(15*a)/100;\n         var b1=(15*b)/64;\n         var c1=(70*c)/70;\n         var tot=a1+b1+c1;\n         if(tot<50){\n             this.setState({score:'0',status:'Fail'});\n         }\n         else if(tot>49 && tot<60)\n         {\n            this.setState({score:'1',status:'Fail'});\n         }\n         else if(tot>59 && tot<70)\n         {\n            this.setState({score:'2',status:'Pass'});\n         }\n         else if(tot>69 && tot<80)\n         {\n            this.setState({score:'3',status:'Pass'});\n         }\n         else if(tot>79 && tot<90)\n         {\n            this.setState({score:'4',status:'Pass'});\n         }\n          else\n          {\n            this.setState({score:'5',status:'Pass'});\n          }\n          event.preventDefault();\n    \n    }\n    render(){\n        return (\n              <div>\n                <h2 >Enter Your Marks</h2>\n                  <form onSubmit={this.calculate} className='ui form' class=\"center\">\n                      <div className='field'>\n                      <lable>Enter Assignment Marks : </lable>\n                      <input type='number' placeholder='Assignment marks' min='0' max='100' onChange={(e)=>{this.setState({ass:e.target.value})}}></input><br/>\n                      </div>\n                      <div className='field'>\n                      <lable>Enter MTT Marks : </lable>\n                      <input type='number' placeholder='MTT Marks' min='0' max='64' onChange={(e)=>{this.setState({mtt:e.target.value})}}></input><br/>\n                      </div>\n                      <div className='field'>\n                      <lable>Enter MPT Marks : </lable>\n                      <input type='number' placeholder='MPT Marks'  min='0' max='70' onChange={(e)=>{this.setState({mpt:e.target.value})}}></input><br/>\n                      </div>\n                      <button className=\"ui button\" type='submit'>submit</button>\n                  </form>\n        <h2 >Your Score : {this.state.score}</h2>\n        <h2>Your Status : {this.state.status}</h2>\n              </div>\n        );\n\n    }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}